[{"body":"","link":"http://localhost:1313/","section":"","tags":null,"title":""},{"body":"","link":"http://localhost:1313/tags/bicep/","section":"tags","tags":null,"title":"Bicep"},{"body":"","link":"http://localhost:1313/categories/bicep/","section":"categories","tags":null,"title":"Bicep"},{"body":"","link":"http://localhost:1313/categories/","section":"categories","tags":null,"title":"Categories"},{"body":"","link":"http://localhost:1313/post/","section":"post","tags":[],"title":"Posts"},{"body":"","link":"http://localhost:1313/tags/","section":"tags","tags":null,"title":"Tags"},{"body":"","link":"http://localhost:1313/tags/terraform/","section":"tags","tags":null,"title":"Terraform"},{"body":"","link":"http://localhost:1313/categories/terraform/","section":"categories","tags":null,"title":"Terraform"},{"body":"Terraform Vs Bicep the main differences\n","link":"http://localhost:1313/post/2024-12-05-terraform-vs-bicep/","section":"post","tags":["terraform","Bicep"],"title":"Terraform vs Bicep"},{"body":"Here is a collection of images sourced from the web.\nEnjoy browsing through this gallery.\n","link":"http://localhost:1313/page/funzone/","section":"page","tags":null,"title":"Fun Zone"},{"body":"","link":"http://localhost:1313/page/","section":"page","tags":null,"title":"Pages"},{"body":"Here is a simple method to display GitHub secrets for debugging purposes.\nUsing this command line:\n1run: echo ${{ secrets.MYSECRET}} | sed \u0026#39;s/./\u0026amp; /g\u0026#39; Here is an example workflow below:\n1name: Print GitHub Secrets 2 3on: 4 push: 5 6jobs: 7 print_secrets: 8 runs-on: ubuntu-latest 9 steps: 10 - name: Debug secret in variable 11 run: echo ${{ secrets.MYSECRET}} | sed \u0026#39;s/./\u0026amp; /g\u0026#39; Danger\rThis method is intended solely for debugging purposes. Avoid using it in production environments and never expose secrets in your pipelines!\n","link":"http://localhost:1313/post/2024-12-02-display-github-secrets-for-debug/","section":"post","tags":["github"],"title":"Display GitHub secrets for debug"},{"body":"","link":"http://localhost:1313/tags/github/","section":"tags","tags":null,"title":"Github"},{"body":"","link":"http://localhost:1313/categories/github/","section":"categories","tags":null,"title":"GitHub"},{"body":"","link":"http://localhost:1313/tags/azure/","section":"tags","tags":null,"title":"Azure"},{"body":"","link":"http://localhost:1313/categories/azure/","section":"categories","tags":null,"title":"Azure"},{"body":"If you want to create your own or contribute to an existing GitHub project, you are on the right page.\nIntroduction Many companies have big infrastructures, but often overlook the organization of their resources in Azure. This oversight can make simple tasks, such as tracking, unnecessarily complicated just because resources weren't properly organized.\nWith Azure resource tagging, you can assign metadata to your resources, making it easy to filter and locate resources that share the same tag!\nThis script has been forked and updated from: Using Azure tags to improve resources organization | by Amine Charot | Charot | Medium\nWhat is a tag? A tag is a Key/Value pair. It can be applied to the resource groups or Directly on the resources. It is searchable so it can be used to find resources or resource groups using Powershell or Azure Portal …\nMicrosoft official documentation is available here: Tag resources, resource groups, and subscriptions for logical organization - Azure Resource Manager | Microsoft Learn\nUsing the PowerShell command:\n1(Get-AzResource -Tag @{ Environment=\u0026#34;PROD\u0026#34;}).Name It will return all the resources that contain the PROD tag. You can separate costs based on a tag name, so the tags in Azure may be useful for billing information.\nCommon tags Environment : The environment which may be sandbox, dev or prod …\nCreatedBy : The person who creates the resource.\nCreationDate : When the resource has been created.\nime To Live : If it is a temporary resource, how much time it must live.\nCriticality : The importance of the resource.\nNote : The creation date may be useful if you want to find all the resources created on the same day.\nTemporary resources use case Tags can be incredibly useful for automation. For example, if you have temporary resources, you can apply a \u0026quot;Time To Live\u0026quot; (TTL) tag to them.\nIn this scenario, you can create a storage account and assign it a \u0026quot;Time To Live\u0026quot; tag. Once the TTL is exceeded, the storage account can be automatically deleted.\nIn this case, the CreationDate tag date format is: dd-MM-yy\nBy using a PowerShell script, you can automate the process of finding and deleting all temporary resources based on their \u0026quot;TTL\u0026quot; tag.\nThis script will find all the resources that contain a “TTL” tag, it will compare the current date with the creation one. If the difference between them is greater than the TTL so we remove the resource.\nUsing these tags, it will be easier for you to purge the old resources.\nNow if we want to remove all the expired resources, we just have to run the script :\n1$resources = Get-AzResource|Where-Object {$_.tags.keys -match \u0026#34;TTL\u0026#34;} 2$currentDate = Get-Date -format \u0026#34;dd-MM-yy\u0026#34; 3$resources.foreach{ 4 $creationDate = Get-Date $PSItem.tags[\u0026#34;CreationDate\u0026#34;] 5 $days = (New-TimeSpan -Start $creationDate -End $currentDate).days 6 $difDays = $PSItem.tags[\u0026#34;TTL\u0026#34;] - $days 7 if($difDays -le 0) 8 { 9 $resourceName = $PSItem.Name 10 Write-Output \u0026#34;Remove the resource $resourceName\u0026#34; 11 Remove-AzResource -ResourceId $PSItem.ResourceId -Force 12 } 13}\rAutomatically add tag CreatedBy use case Some tags (like the Time To Live, Criticality or createdDate) may be added on creation.\nFor untagged or legacy resources without “CreatedBy” can be added automatically using a script.\nThis script will get all the resources and for every untagged one, it will apply a “CreatedBy” Tag.\n1$resources = Get-AzResource 2 3$currentTime = Get-Date 4$endTime = $currentTime.AddDays(-7 * $cnt) 5$startTime = $endTime.AddDays(-7) 6 7$resources.foreach{ 8 $untaggedResources = $PSItem.tags[\u0026#34;CreatedBy\u0026#34;] 9 if($untaggedResources -eq $null) 10 { 11 $owner = Get-AzLog -ResourceId $PSItem.ResourceId -StartTime $startTime -EndTime $endTime | Where {$_.Authorization.Action -like \u0026#34;*/write*\u0026#34;} | 12 Select -ExpandProperty Caller | 13 Group-Object | 14 Sort-Object | 15 Select -ExpandProperty Name 16 $PSItem.Tags.Add(\u0026#34;CreatedBy\u0026#34;, $owner) 17 $PSItem | Set-AzResource -Force 18 } 19 20}\rEnjoy!\n","link":"http://localhost:1313/post/2024-11-13-azure-tags-remove-old-resources/","section":"post","tags":["cloud","azure","tags"],"title":"Azure Tags remove old resources"},{"body":"","link":"http://localhost:1313/tags/cloud/","section":"tags","tags":null,"title":"Cloud"},{"body":"","link":"http://localhost:1313/tags/policies/","section":"tags","tags":null,"title":"Policies"},{"body":"If you want to create your own or to contribute to an existing GitHub project you are on the right page.\nUse this script to quickly find and search for supported Azure Policy Aliases https://docs.microsoft.com/en-us/azure/governance/policy/concepts/definition-structure#aliases to use when authoring custom Azure Policy definitions.\nSelect one or more namespaces from the list –\u0026gt; Click OK\nAnd then you will have all available aliases for the selected resources:\nHere is the script:\n1# List all namespaces available in Azure Policy 2$AllNamespaces = (Get-AzPolicyAlias -ListAvailable).Namespace | Sort-Object | Get-Unique 3 4# Select the namespaces you want to work with 5$SelectedNamespaces = $null 6$SelectedNamespaces = @() 7 8$AllNamespaces | Out-GridView -Title \u0026#34;Select one or more namespace. Found: $($AllNamespaces.count)\u0026#34; -OutputMode Multiple ` 9| Foreach-object { $SelectedNamespaces += $_ } 10 11# Get all aliases available in the selected namespaces 12$AvailableAliases = $null 13$AvailableAliases = @() 14 15Foreach ($Namespace in $SelectedNamespaces) 16{ 17 $AvailableAliases += (Get-AzPolicyAlias -NamespaceMatch $Namespace).Aliases | Select-Object 18 Name, DefaultPath 19} 20 21# List all aliases available in the selected namespaces 22$AvailableAliases | Out-GridView -Title \u0026#34;Available alias for selected ($($SelectedNamespaces.count)): $($SelectedNamespaces)\u0026#34; -OutputMode Single ","link":"http://localhost:1313/post/2024-11-13-search-azure-policy-aliases/","section":"post","tags":["policies"],"title":"Search Azure policy aliases and sends output to an interactive table"},{"body":"","link":"http://localhost:1313/tags/tags/","section":"tags","tags":null,"title":"Tags"},{"body":"If you want to create your own or to contribute to an existing GitHub project you are on the right page.\nYou probably wouldn’t furnish a house you’re building with a state of the art entertainment system without first installing doors and an alarm system. Similarly, it isn’t advisable to put valuable applications and data used to run your business in the cloud without ensuring the proper foundational security and governance controls are in place.\nMany organizations struggle with how they want their cloud home to look, often so anxious to move that proper planning is ignored. Whether adopting PaaS, IaaS, or SaaS, properly planned governance and security foundations are key to ensuring a protected and controlled environment.\nCloud home Critical Design Areas Key components Cloud Adoption Framework (CAF) Landing zone Management groups Policies Built-In vs custom Audit / Deny / If Not exist Automation Azure DevOps vs GitHub RBAC Least privileges\nGroups instead of direct user assigments\nNaming convention Define a naming convention before any deployment Exemple of naming convention Tagging Main tags (Env, CreationDate, ...) Network Hub and spoke topology Ip adress plan Peering IPAM VMS NAT Extra tools Az Goviz\nNaming convention tool\n","link":"http://localhost:1313/post/2024-11-06-dont-build-your-cloud-home-on-shaky-foundations/","section":"post","tags":["governance"],"title":"✨ Don’t build your cloud home on shaky foundations"},{"body":"If you want to create your own or to contribute to an existing GitHub project you are on the right page.\nKusto Query Language (KQL) Query Collection Kusto Query Language (KQL) is the language used across Azure Resource Graph, Azure Monitor, Azure Data Explorer, and Azure Log Analytics.\nHere is a collection of queries: Resource Graph Queries\n⭐✨ Azure Advisor Service retirement 1Kustoadvisorresources 2| project id, properties.impact, properties.shortDescription.problem ⭐ AKS List node pools 1KustoResources 2| where type == \u0026#34;microsoft.containerservice/managedclusters\u0026#34; 3| extend nodepools = properties.agentPoolProfiles 4| mv-expand nodepools 5| project name, nodepools.name, nodepools.vmSize, nodepools.minCount, nodepools.maxCount, nodepools.powerState.code, nodeCount = tostring(nodepools[\u0026#39;count\u0026#39;]) 6| sort by name List nodes pools2 1KustoResources 2| where type == \u0026#34;microsoft.containerservice/managedclusters\u0026#34; 3| extend properties.agentPoolProfiles 4| project subscriptionId, name, pool = (properties.agentPoolProfiles) 5| mv-expand pool 6| project subscription = subscriptionId, cluster = name, size = pool.vmSize, count = pool.[\u0026#39;count\u0026#39;] Get Node pools information 1Kustoresources 2| where type == \u0026#34;microsoft.containerservice/managedclusters\u0026#34; 3| extend properties.agentPoolProfiles 4| project subscriptionId, name, nodePool = properties.agentPoolProfiles 5| mv-expand nodePool 6| project subscriptionId, name, sku = nodePool.vmSize, count = nodePool.[\u0026#39;count\u0026#39;], powerState = nodePool.powerState.code ⭐ Disks Get Premium Disks 1Kustoresources 2| where type =~ \u0026#39;microsoft.compute/disks\u0026#39; 3| extend skuName=tostring(sku.name) 4| extend accountType=case(skuName =~ \u0026#39;Standard_LRS\u0026#39;, \u0026#39;Standard HDD LRS\u0026#39;, 5 skuName =~ \u0026#39;StandardSSD_LRS\u0026#39;, \u0026#39;Standard SSD LRS\u0026#39;, 6 skuName =~ \u0026#39;UltraSSD_LRS\u0026#39;, \u0026#39;Ultra disk LRS\u0026#39;, 7 skuName =~ \u0026#39;Premium_LRS\u0026#39;, \u0026#39;Premium SSD LRS\u0026#39;, 8 skuName =~ \u0026#39;Standard_ZRS\u0026#39;, \u0026#39;Zone-redundant\u0026#39;, 9 skuName =~ \u0026#39;Premium_ZRS\u0026#39;, \u0026#39;Premium SSD ZRS\u0026#39;, 10 skuName =~ \u0026#39;StandardSSD_ZRS\u0026#39;, \u0026#39;Standard SSD ZRS\u0026#39;, 11 skuName) 12| where accountType contains \u0026#34;Premium\u0026#34; Get SSD Disks 1Kustoresources 2| where type =~ \u0026#39;microsoft.compute/disks\u0026#39; 3| extend skuName=tostring(sku.name) 4| extend accountType=case(skuName =~ \u0026#39;Standard_LRS\u0026#39;, \u0026#39;Standard HDD LRS\u0026#39;, 5 skuName =~ \u0026#39;StandardSSD_LRS\u0026#39;, \u0026#39;Standard SSD LRS\u0026#39;, 6 skuName =~ \u0026#39;UltraSSD_LRS\u0026#39;, \u0026#39;Ultra disk LRS\u0026#39;, 7 skuName =~ \u0026#39;Premium_LRS\u0026#39;, \u0026#39;Premium SSD LRS\u0026#39;, 8 skuName =~ \u0026#39;Standard_ZRS\u0026#39;, \u0026#39;Zone-redundant\u0026#39;, 9 skuName =~ \u0026#39;Premium_ZRS\u0026#39;, \u0026#39;Premium SSD ZRS\u0026#39;, 10 skuName =~ \u0026#39;StandardSSD_ZRS\u0026#39;, \u0026#39;Standard SSD ZRS\u0026#39;, 11 skuName) 12| where accountType contains \u0026#34;SSD\u0026#34; Get ZRS Disks 1Kustoresources 2| where type =~ \u0026#39;microsoft.compute/disks\u0026#39; 3| extend skuName=tostring(sku.name) 4| extend accountType=case(skuName =~ \u0026#39;Standard_LRS\u0026#39;, \u0026#39;Standard HDD LRS\u0026#39;, 5 skuName =~ \u0026#39;StandardSSD_LRS\u0026#39;, \u0026#39;Standard SSD LRS\u0026#39;, 6 skuName =~ \u0026#39;UltraSSD_LRS\u0026#39;, \u0026#39;Ultra disk LRS\u0026#39;, 7 skuName =~ \u0026#39;Premium_LRS\u0026#39;, \u0026#39;Premium SSD LRS\u0026#39;, 8 skuName =~ \u0026#39;Standard_ZRS\u0026#39;, \u0026#39;Zone-redundant\u0026#39;, 9 skuName =~ \u0026#39;Premium_ZRS\u0026#39;, \u0026#39;Premium SSD ZRS\u0026#39;, 10 skuName =~ \u0026#39;StandardSSD_ZRS\u0026#39;, \u0026#39;Standard SSD ZRS\u0026#39;, 11 skuName) 12| where accountType contains \u0026#34;ZRS\u0026#34; Sort Disks By Size IOPS 1Kustoresources 2| where type == \u0026#34;microsoft.compute/disks\u0026#34; 3| project Disk_name=name, SKU=sku.name, Size=strcat(properties[\u0026#39;diskSizeGB\u0026#39;],\u0026#34;GB\u0026#34;), IOPS=tolong(properties[\u0026#39;diskIOPSReadWrite\u0026#39;]) 4| sort by Size ⭐ Frontdoor Routing rules and accepted protocols 1Kustoresources 2| where type == \u0026#34;microsoft.network/frontdoors\u0026#34; 3| project subscriptionId, frontDoorName=name, routingRules = (properties.routingRules) 4| mv-expand routingRules 5| project subscriptionId, frontDoorName, routingRuleName=routingRules.name, protocols = routingRules.properties ⭐ Network List all subnets with delegation 1Kustoresources 2| where type == \u0026#34;microsoft.network/virtualnetworks\u0026#34; 3| project vnetName = name, subnets = (properties.subnets) 4| mvexpand subnets 5| extend subnetName = (subnets.name) 6| extend isDelegated = isnotnull(subnets.properties.delegations) and array_length(subnets.properties.delegations) != 0 7| where isDelegated == 1 8| project vnetName, subnetName List subnets without NSG 1Kustoresources 2| where type == \u0026#34;microsoft.network/virtualnetworks\u0026#34; 3| project vnetName = name, subnets = (properties.subnets) 4| mvexpand subnets 5| extend subnetName = (subnets.name) 6| extend hasNSG = isnotnull(subnets.properties.networkSecurityGroup) 7| where hasNSG == 0 8| project vnetName, subnetName List subnets with service endpoint 1Kustoresources 2| where type == \u0026#34;microsoft.network/virtualnetworks\u0026#34; 3| project vnetName = name, subnets = (properties.subnets) 4| mvexpand subnets 5| extend subnetName = (subnets.name) 6| extend hasServiceEndpoints = isnotnull(subnets.properties.serviceEndpoints) and array_length(subnets.properties.serviceEndpoints) != 0 7| where hasServiceEndpoints == 1 8| project vnetName, subnetName List subnet with UDR 1Kustoresources 2| where type == \u0026#34;microsoft.network/virtualnetworks\u0026#34; 3| project vnetName = name, subnets = (properties.subnets) 4| mvexpand subnets 5| extend subnetName = (subnets.name) 6| extend hasRouteTable = isnotnull(subnets.properties.routeTable) 7| where hasRouteTable == 1 8| project vnetName, subnetName Subnet IP usage 1Kustoresources 2| where type == \u0026#34;microsoft.network/virtualnetworks\u0026#34; 3| project vnetName = name, subnets = (properties.subnets) 4| mvexpand subnets 5| extend subnetName = (subnets.name) 6| extend mask = split(subnets.properties.addressPrefix, \u0026#39;/\u0026#39;, 1)[0] 7| extend usedIp = array_length(subnets.properties.ipConfigurations) 8| extend totalIp = case(mask == 29, 3, 9 mask == 28, 11, 10 mask == 27, 27, 11 mask == 26, 59, 12 mask == 25, 123, 13 mask == 24, 251, 14 mask == 23, 507, 15 mask == 22, 1019, 16 mask == 21, 2043, 17 mask == 20, 4091, 18 mask == 19, 8187, 19 mask == 18, 16379, 20 mask == 17, 32763, 21 mask == 16, 65531, 22 mask == 15, 131067, 23 mask == 14, 262139, 24 mask == 13, 524283, 25 mask == 12, 1048571, 26 mask == 11, 2097147, 27 mask == 10, 4194299, 28 mask == 9, 8388603, 29 mask == 8, 16777211, 30 -1) 31| extend availableIp = totalIp - usedIp 32| project vnetName, subnetName, mask, usedIp, totalIp, availableIp, subnets 33| order by toint(mask) desc ⭐ Resources Display last resources changes since the last week 1Kustoresourcechanges 2| extend changeTime = todatetime(properties.changeAttributes.timestamp), 3targetResourceId = tostring(properties.targetResourceId), 4changeType = tostring(properties.changeType), changedBy = tostring(properties.changeAttributes.changedBy), 5changedByType = properties.changeAttributes.changedByType, 6clientType = tostring(properties.changeAttributes.clientType) 7| where changeTime \u0026gt; ago(7d) 8| project changeType, changedBy, changedByType, clientType 9| summarize count() by changedBy, changeType, clientType 10| order by count_ desc ⭐ Resources Groups Display Empty Resource Groups 1KustoResourceContainers 2| where type == \u0026#39;microsoft.resources/subscriptions/resourcegroups\u0026#39; 3| extend rgAndSub = strcat(resourceGroup, \u0026#39;--\u0026#39;, subscriptionId) 4| join kind=leftouter ( 5 Resources 6 | extend rgAndSub = strcat(resourceGroup, \u0026#39;--\u0026#39;, subscriptionId) 7 | summarize count() by rgAndSub 8) on rgAndSub 9| where isnull(count_) ⭐ Policies Find unused custom policies 1Kustopolicyresources 2| where type == \u0026#34;microsoft.authorization/policydefinitions\u0026#34; 3| extend policyType = tostring(properties.policyType) 4| where policyType == \u0026#34;Custom\u0026#34; 5| join kind=leftouter ( 6 policyresources 7 | where type == \u0026#34;microsoft.authorization/policysetdefinitions\u0026#34; 8 | extend policyType = tostring(properties.policyType) 9 | extend policyDefinitions = properties.policyDefinitions 10 | where policyType == \u0026#34;Custom\u0026#34; 11 | mv-expand policyDefinitions 12 | extend policyDefinitionId = tostring(policyDefinitions.policyDefinitionId) 13 | project associedIdToInitiative=policyDefinitionId 14 | distinct associedIdToInitiative) on $left.id == $right.associedIdToInitiative 15| where associedIdToInitiative == \u0026#34;\u0026#34; 16| join kind=leftouter( 17 policyresources 18 | where type == \u0026#34;microsoft.authorization/policyassignments\u0026#34; 19 | extend policyDefinitionId = tostring(properties.policyDefinitionId) 20 | project associatedDefinitionId=policyDefinitionId 21 | distinct associatedDefinitionId 22) on $left.id == $right.associatedDefinitionId 23| where associatedDefinitionId == \u0026#34;\u0026#34; 24| extend displayName = tostring(properties.displayName) 25| project id, displayName Count policies assignment by scope 1Kustopolicyresources 2| where type == \u0026#34;microsoft.authorization/policyassignments\u0026#34; 3| extend scope = tostring(properties.scope) 4| summarize count() by scope 5| order by count_ desc Count custom policies assignments by scope 1Kustopolicyresources 2| where type == \u0026#34;microsoft.authorization/policydefinitions\u0026#34; 3| extend policyType = tostring(properties.policyType) 4| where policyType == \u0026#34;Custom\u0026#34; 5| project id 6| extend scope = tostring(split(id, \u0026#34;/providers/Microsoft.Authorization/policyDefinitions/\u0026#34;, 0)[0]) 7| summarize count() by scope 8| order by count_ desc ⭐ RBAC List user direct assignment at management group level 1Kustoauthorizationresources 2| extend scope = tostring(properties.scope) 3| join kind = inner ( 4 resourcecontainers 5 | where type == \u0026#34;microsoft.management/managementgroups\u0026#34; 6 | project managementGroupId=id, managementGroupName=properties.displayName 7) on $right.managementGroupId == $left.scope 8| where properties.principaltype == \u0026#34;User\u0026#34; 9| project properties.createdOn, managementGroupName, scope, managementGroupId List user assignment at subscription level 1Kustoauthorizationresources 2| join kind = inner ( 3 resourcecontainers 4 | where type == \u0026#34;microsoft.resources/subscriptions\u0026#34; 5 | project subscriptionName=name, subscriptionId) on subscriptionId 6| where type == \u0026#34;microsoft.authorization/roleassignments\u0026#34; 7| where properties.principalType == \u0026#34;User\u0026#34; 8| project properties.createdOn, properties.scope, properties.principalId, subscriptionId All RBAC Assignments 1Kustoauthorizationresources 2| where type =~ \u0026#39;microsoft.authorization/roleassignments\u0026#39; 3| extend roleDefinitionId= tolower(tostring(properties.roleDefinitionId)) 4| extend principalType = properties.principalType 5| extend principalId = properties.principalId 6| extend description = properties.description 7| extend scope = properties.scope 8| extend createdBy = properties.createdBy 9| join kind = inner ( 10authorizationresources 11| where type =~ \u0026#39;microsoft.authorization/roledefinitions\u0026#39; 12| extend roleDefinitionId = tolower(id) 13| extend roleName = tostring(properties.roleName) 14| extend roleType = tostring(properties.type) 15| project roleDefinitionId,roleName,roleType 16) on roleDefinitionId 17| project principalId,principalType,createdBy,description,roleName,roleType,scope,roleDefinitionId ⭐ Resource Groups Display Empty Resource Groups 1KustoResourceContainers 2| where type == \u0026#39;microsoft.resources/subscriptions/resourcegroups\u0026#39; 3| extend rgAndSub = strcat(resourceGroup, \u0026#39;--\u0026#39;, subscriptionId) 4| join kind=leftouter ( 5 Resources 6 | extend rgAndSub = strcat(resourceGroup, \u0026#39;--\u0026#39;, subscriptionId) 7 | summarize count() by rgAndSub 8) on rgAndSub 9| where isnull(count_) ⭐ Resource changes Display last resources changes since the last week 1Kustoresourcechanges 2| extend changeTime = todatetime(properties.changeAttributes.timestamp), 3targetResourceId = tostring(properties.targetResourceId), 4changeType = tostring(properties.changeType), changedBy = tostring(properties.changeAttributes.changedBy), 5changedByType = properties.changeAttributes.changedByType, 6clientType = tostring(properties.changeAttributes.clientType) 7| where changeTime \u0026gt; ago(7d) 8| project changeType, changedBy, changedByType, clientType 9| summarize count() by changedBy, changeType, clientType 10| order by count_ desc ⭐ Storage Accounts Count Storage accounts by sku 1Kustoresources 2| where type == \u0026#34;microsoft.storage/storageaccounts\u0026#34; 3| extend sku = sku.name 4| summarize count(name) by tostring(sku) ⭐ Subscriptions List subscriptions part of an EA 1Kustoresourcecontainers 2| where type == \u0026#34;microsoft.resources/subscriptions\u0026#34; 3| where properties.state == \u0026#34;Enabled\u0026#34; 4| mv-expand subscriptionPolicies = properties.subscriptionPolicies 5| where name !contains \u0026#34;Visual Studio\u0026#34; and subscriptionPolicies.quotaId startswith \u0026#34;MSDNDevTest\u0026#34; or subscriptionPolicies.quotaId startswith \u0026#34;EnterpriseAgreement\u0026#34; List subscriptions by MG 1KustoResourceContainers 2| where type =~ \u0026#39;microsoft.resources/subscriptions\u0026#39; 3| extend mgParent = properties.managementGroupAncestorsChain 4| mv-expand with_itemindex=MGHierarchy mgParent 5| project subscriptionId, name, mgParent, MGHierarchy, mgParent.name Count subscriptions by MG 1KustoResourceContainers 2| where type =~ \u0026#39;microsoft.management/managementgroups\u0026#39; 3| project mgname = name 4| join kind=leftouter (resourcecontainers | where type=~ \u0026#39;microsoft.resources/subscriptions\u0026#39; 5| extend mgParent = properties.managementGroupAncestorsChain | project id, mgname = tostring(mgParent[0].name)) on mgname 6| summarize count() by mgname Count all subscriptions by tenant 1KustoResourceContainers 2| where type =~ \u0026#39;microsoft.resources/subscriptions\u0026#39; 3| project SubscriptionName=name, subscriptionId, tenantId 4| summarize count() by tenantId 5| order by [\u0026#39;count_\u0026#39;] desc List resources part of a list of subscriptions 1Kustoresources 2| where subscriptionId in (\u0026#34;subid1-xxx-xxx-xxx-xxx\u0026#34;, \u0026#34;subid2-xxx-xxx-xxx-xxx\u0026#34;, \u0026#34;subid3-xxx-xxx-xxx-xxx\u0026#34;, \u0026#34;subid4-xxx-xxx-xxx-xxx\u0026#34;) Check subscription naming convention 1Kustoresourcecontainers 2| where type == \u0026#34;microsoft.resources/subscriptions\u0026#34; 3| where properties.state == \u0026#39;Enabled\u0026#39; 4| extend NamingCheck = iff((name startswith \u0026#39;sub-\u0026#39;),\u0026#34;Naming is OK\u0026#34;,\u0026#34;Naming is not OK\u0026#34;) 5| summarize count() by NamingCheck Check subscription naming convention on a specific management group 1Kustoresourcecontainers 2| where type == \u0026#34;microsoft.resources/subscriptions\u0026#34; 3| where properties.state == \u0026#39;Enabled\u0026#39; 4| where properties.managementGroupAncestorsChain contains \u0026#39;Production\u0026#39; 5| extend NamingCheck = iff((name startswith \u0026#39;sub-\u0026#39;),\u0026#34;Naming is OK\u0026#34;,\u0026#34;Naming is not OK\u0026#34;) 6| summarize count() by NamingCheck List subscriptions in a specific management group 1Kustoresourcecontainers 2 | where type == \u0026#34;microsoft.resources/subscriptions\u0026#34; 3 | where (properties.managementGroupAncestorsChain) contains \u0026#34;Sandbox\u0026#34; Count resources type in a subscription 1Kustoresources 2| join kind=leftouter 3 (resourcecontainers 4 | where type == \u0026#39;microsoft.resources/subscriptions\u0026#39; 5 | project subscriptionName=name, subscriptionId) on subscriptionId 6| where subscriptionName == \u0026#34;\u0026lt;your-sub-name-here\u0026gt;\u0026#34; 7| summarize count() by type, subscriptionName Count subscriptions by management groups 1Kustoresourcecontainers 2| where type == \u0026#39;microsoft.resources/subscriptions\u0026#39; 3| project subscriptionName = name, managementgroups = (properties.managementGroupAncestorsChain) 4| mv-expand managementgroups 5| summarize count() by tostring(managementgroups.displayName) 6| order by count_ desc ⭐ Tags Resources without tag 1resourcecontainers 2| where type != \u0026#34;microsoft.management/managementgroups\u0026#34; 3| mv-expand bagexpansion=array tags 4| where isempty(tags) Resources with specific tags and expand tag names/values to individual rows 1resourcecontainers 2| where type != \u0026#34;microsoft.management/managementgroups\u0026#34; 3| mvexpand parsejson(tags) 4| extend tagname = tostring(bag_keys(tags)[0]) 5| extend tagvalue = tostring(tags[tagname]) 6| project name,id,type,location,subscriptionId,tagname,tagvalue 7| union (resources 8| mvexpand parsejson(tags) 9| extend tagname = tostring(bag_keys(tags)[0]) 10| extend tagvalue = tostring(tags[tagname]) 11| project name,id,type,location,subscriptionId,tagname,tagvalue) 12| where tagname == \u0026#34;Environment\u0026#34; or tagname == \u0026#34;Owner\u0026#34; Resources not containing a specific tag 1resourcecontainers 2| where tags !contains \u0026#39;Environment\u0026#39; Resources not containing a tag and count 1resourcecontainers 2| where tags !contains \u0026#39;Environment\u0026#39; 3| project name, resourceGroup, subscriptionId, location, tags 4| summarize count () by subscriptionId All tags for resources 1resourcecontainers 2| project name,type,location,subscriptionId,tags 3| union (resources | project name,type,location,subscriptionId,tags) Count for a specific tag key 1ResourceContainers 2| where type =~ \u0026#39;microsoft.resources/subscriptions/resourcegroups\u0026#39; 3| mvexpand tags 4| extend tagKey = tostring(bag_keys(tags)[0]) 5| extend tagValue = tostring(tags[tagKey]) 6| where tagKey == \u0026#34;Environment\u0026#34; 7| summarize count() by tagValue 8| order by [\u0026#39;count_\u0026#39;] desc TEST 1resources 2| where type =~ \u0026#39;Microsoft.Compute/virtualMachines\u0026#39; 3| mvexpand tags 4| extend tagKey = tostring(bag_keys(tags)[0]) 5| extend tagValue = tostring(tags[tagKey]) 6| where tagKey hasprefix \u0026#34;creat\u0026#34; and tagKey hasprefix \u0026#34;cr\u0026#34; 7| project name, tags, tagKey, tagValue ","link":"http://localhost:1313/post/2024-11-06-kql-query-collection/","section":"post","tags":["kql"],"title":"✨ KQL query collection"},{"body":"","link":"http://localhost:1313/tags/api/","section":"tags","tags":null,"title":"API"},{"body":"If you want to create your own or to contribute to an existing GitHub project you are on the right page.\nMicrosoft provides a list of all REST APIs (REST API Browser) available for Azure by clicking on the following link: https://docs.microsoft.com/en-us/rest/api/?view=Azure\nFor example, if I take the API dedicated to Compute and select Virtual Machines: https://docs.microsoft.com/en-us/rest/api/compute/virtualmachines\nI will have access to all the actions I can perform on the Virtual Machines object.\nFor example, to list all VMs in an Azure subscription: https://docs.microsoft.com/en-us/rest/api/compute/virtualmachines/listall\nThe major advantage of this site is that it allows live testing of the selected API (by clicking on Try It) from a web browser, without needing to install a third-party tool (such as Postman or others).\nAll Azure APIs return results in JSON format, making them easily exploitable.\nEach Azure API requires passing a mandatory parameter, api-version, to specify the version of the API to use and thus benefit from backward compatibility in case of version changes.\nFirst, install the Az.Resources module:\n1Install-Module -Name Az.Resources In PowerShell, if I want to know the version of the APIs available for a given provider, I need to execute the following command:\n1PowerShellGet-AzResourceProvider -ListAvailable | Select-Object ProviderNamespace -ExpandProperty ResourceTypes | select-object ProviderNamespace, RegistrationState, ResourceTypeName,ApiVersions | ft If I take the Compute provider, I can display the resources with the following command:\n1PowerShell(Get-AzResourceProvider -ProviderNamespace Microsoft.Compute).ResourceTypes And with this command, I can list the available API versions:\n1PowerShell((Get-AzResourceProvider -ProviderNamespace Microsoft.Compute).ResourceTypes | Where-Object ResourceTypeName -eq virtualMachines).ApiVersions So, all those listed are supported. The retention period is quite long, allowing application developers enough time to make necessary modifications without being caught off guard before the API is deprecated.\nEach API has its own lifecycle, and there is no official timeline regarding the retention period of older versions.\n","link":"http://localhost:1313/post/2024-11-06-rest-api-versions-and-lifecycle/","section":"post","tags":["API"],"title":"Azure REST API’s, versions, and lifecycle"},{"body":"If you want to create your own or to contribute to an existing GitHub project you are on the right page.\nUsing PowerShell or the command line to call an Azure REST API is a quick method to retrieve or update information about a specific resource in Azure. Although Postman can also be used for this purpose, here is an example of how to make these requests using PowerShell.\nFirst, log in to your Azure account with the following command:\n1Connect-AzAccount Set the subscription context if you have multiple subscriptions:\n1Set-AzContext -Subscription \u0026#34;\u0026lt;SubscriptionId\u0026gt;\u0026#34; Get the current token:\n1# Get the current token 2$Token = (Get-AzAccessToken).Token Make the authorization header:\n1# Set the authorization header 2$Headers = @{ 3 Authorization = \u0026#34;Bearer $Token\u0026#34; 4} Define wich resource you want to query. In this example, I want to get properties of my storage account, in a resource group in my subscription.\nTo get the API url and properties, I am using the REST API reference documentation: Azure REST API reference documentation | Microsoft Learn.\nTo construct the API URL I will substitute subscriptionId, resource group, and storage account with proper values.\n1$Uri = \u0026#34;https://management.azure.com/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}?api-version=2023-01-01\u0026#34; Finally, use Invoke-WebRequest command for the API call:\n1Invoke-WebRequest -Method GET -UseBasicParsing -Uri $Uri -Headers $Headers JSON content of the request for the storage account properties can be accessed with:\n1(Invoke-WebRequest -Method GET -Uri $Uri -Headers $Headers).Content Here is a full code:\n1Connect-AzAccount 2 3Set-AzContext -Subscription \u0026#34;\u0026lt;SubscriptionId\u0026gt;\u0026#34; 4 5# Get the current token 6$Token = (Get-AzAccessToken).Token 7 8# Set the authorization header 9$Headers = @{ 10 Authorization = \u0026#34;Bearer $Token\u0026#34; 11} 12 13$Uri = \u0026#34;https://management.azure.com/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}?api-version=2023-01-01\u0026#34; 14 15$Result = (Invoke-WebRequest -Method GET -Uri $Uri -Headers $Headers) 16 17If ($Result.StatusCode -eq \u0026#34;200\u0026#34;){ 18 $Result.Content 19} ","link":"http://localhost:1313/post/2024-11-06-call-azure-api-with-powershell/","section":"post","tags":["API"],"title":"Call Azure API with Powershell"},{"body":"If you want to create your own or to contribute to an existing GitHub project you are on the right page.\nIf you see the Identiy not found in your RBAC assignments, it means that these identitiy have been deleted from your Entra ID, whether it is a user, a group or a SPN.\nHowever, Azure does not clean up for you, and it’s up to you and it is just ugly in the portal.\nYou must clean-up any orphaned role assignments on a regular basis.\nHere is a Powershell script to clean up:\n1[CmdletBinding()] 2param ( 3 [switch] $CheckOnly, 4 [Parameter(Mandatory = $false)] 5 [string] $Scope = \u0026#34;\u0026#34; 6) 7 8[array]$Assignments = @() 9 10if (\u0026#34;\u0026#34; -eq $Scope) { 11 Write-Output \u0026#34;No Scope defined, getting all assignments.\u0026#34; 12 $Assignments = Get-AzRoleAssignment | Where-Object { $_.ObjectType -eq \u0026#34;Unknown\u0026#34; } 13} else { 14 Write-Output \u0026#34;Scope is: $Scope\u0026#34; 15 $Assignments = Get-AzRoleAssignment -Scope $Scope | Where-Object { $_.ObjectType -eq \u0026#34;Unknown\u0026#34; } 16} 17 18Write-Output \u0026#34;Total: $($Assignments.Count) Unknown Identity found\u0026#34; 19 20Foreach ($Assignment in $Assignments) { 21 22 Write-Output \u0026#34;---------------------------\u0026#34; 23 Write-Output \u0026#34;Scope: $($Assignment.Scope)\u0026#34; 24 Write-Output \u0026#34;Object Type: $($Assignment.ObjectType)\u0026#34; 25 Write-Output \u0026#34;Display Name: $($Assignment.DisplayName)\u0026#34; 26 Write-Output \u0026#34;SignIn Name: $($Assignment.SignInName)\u0026#34; 27 Write-Output \u0026#34;Role Definition Name: $($Assignment.RoleDefinitionName)\u0026#34; 28 Write-Output \u0026#34;Role Definition Id: $($Assignment.RoleDefinitionId)\u0026#34; 29 Write-Output \u0026#34;Role Assignment Id: $($assignment.RoleAssignmentId)\u0026#34; 30 Write-Output \u0026#34;---------------------------\u0026#34; 31 Write-Output \u0026#34;\u0026#34; 32 33 if (-not $CheckOnly) { 34 Write-Output \u0026#34;Removing assignment: $($Assignment.RoleAssignmentId)\u0026#34; 35 $Assignment | Remove-AzRoleAssignment -Verbose 36 } 37 38} ","link":"http://localhost:1313/post/2024-11-06-clean-rbac-identity-not-found/","section":"post","tags":["RBAC"],"title":"Clean RBAC Identity not found"},{"body":"","link":"http://localhost:1313/tags/dns/","section":"tags","tags":null,"title":"DNS"},{"body":"","link":"http://localhost:1313/tags/governance/","section":"tags","tags":null,"title":"Governance"},{"body":"If you want to create your own or to contribute to an existing GitHub project you are on the right page.\n1. Contexte Je possède un nom de domaine benoitgaumard.fr qui permet d’afficher le site que vous visitez 🙂\nLa gestion de la zone DNS pour ce domaine est effectuée par le registrar chez qui j’ai acheté le nom de domaine, en l’occurrence OVH.\nSi je me connecte à l’interface OVH, je peux gérer ma zone DNS et y ajouter n’importe quel type d’enregistrement (A, CNAME, NS, MX, TXT, etc) en cas de besoin.\nPour différentes applications hébergées dans Azure, j’ai régulièrement besoin de créer de nouvelles entrées, afin que mes applications puissent s’afficher avec un nom de domaine de type : http://monapp1.benoitgaumard.fr, http://monapp2.benoitgaumard.fr, etc\nPour cela je dois donc effectuer la configuration en allant dans deux interfaces différentes (Portails), celui d’Azure : https://portal.azure.com et celui d’OVH : https://www.ovh.com/manager\nLe but de cet article est de montrer comment centraliser la gestion de cette zone dans Azure DNS en faisant une délégation de zone.\n2. Création d’une nouvelle zone DNS publique dans Azure Azure DNS vous permet d’héberger une zone DNS et de gérer les enregistrements DNS pour un domaine dans Azure. Pour que les requêtes DNS d’un domaine atteignent Azure DNS, le domaine doit être délégué à Azure DNS à partir du domaine parent. Azure DNS n’est pas le bureau d’enregistrement (Registrar) de ce domaine.\nSe connecter au portail Azure et rechercher DNS Zone dans le Marketplace. Cliquer Sur Create. Spécifier un resource group existant ou en créer un nouveau. Dans le champs Name indiquer le nom de la zone DNS à créer. Choisir l’emplacement du groupe de resource (West Europe) Ajouter des Tags si nécéssaire Cliquer sur Create\nNote: Pour information Azure vous autorise à créer n’importe quel nom de zone (Ex : Microsoft.com, Google.fr, toto.local) même si vous n’êtes pas le propriétaire. Cependant pour la gérer et ajouter de nouveaux enregistrements il faut en être le propriétaire.\nPour gérer la zone, Azure met à disposition par défaut 4 Name Server (NS) afin d’assurer une redondance en cas de panne.\nNote: Copier les noms des serveurs NS dans un coin, ils serviront pour effectuer la délégation dans le portail OVH.\n3. Déléguer le domaine Maintenant que la zone DNS est créée et que nous disposons des serveurs de noms, il faut mettre à jour le domaine parent avec les serveurs de noms Azure DNS. Chaque bureau d’enregistrement (registrar) a ses propres outils (Portail, etc) de gestion DNS pour modifier les enregistrements de serveur de noms pour un domaine.\nRetourner dans le portail OVH. Aller dans le menu DNS Servers. Supprimer les entrées de type NS OVH. Ajouter les 4 serveurs NS Azure (Supprimer le point final). Cliquer sur Apply Configuration. Note: Attention vos sites et services associés à votre nom de domaine (mail, ftp,etc) ne seront plus accessibles le temps de la manipulation.\n4. Créer les enregistrements DNS Maintenant Azure DNS est en charge de gérer cette zone, il va donc falloir recréer les enregistrement adéquats (A, CNAME, NS, MX, TXT, etc) afin que le service revienne à la normale et que votre si web s’affiche par exemple.\nPour que mon site s’affiche, le premier enregistrement à créer dans Azure DNS est un enregistrement de type A pointant vers l’IP publique de mon site web fournie par OVH.\nDans Azure DNS, cliquer sur Record set.\nLaisser le champs Name vide ou taper @ (Correspond à la racine du site). Sélectionner un enregistrement de type A. Laisser le TTL par défaut. Ajouter l’adresse IP publique du site web. Une fois l’entrée nous obtenons ceci :\nNous allons maintenant crée une entrée www de type CNAME qui pointe vers la racine du site.\n5. Tester la délégation Une fois la délégation effectuée, vous pouvez vérifier qu’elle fonctionne à l’aide d’un outil tel que nslookup pour interroger la zone. Vous devrez peut-être patienter 10 minutes ou plus une fois la délégation effectuée avant de pouvoir vérifier qu’elle fonctionne. La propagation des modifications dans le système DNS peut prendre du temps.\nIl est inutile de spécifier les serveurs de noms Azure DNS. Si la délégation est correctement configurée, le processus de résolution DNS normal détecte automatiquement les serveurs de noms Azure.\nÀ partir d’une invite de commandes, saisir la commande nslookup comme dans l’exemple suivant :\nnslookup -type=SOA benoitgaumard.fr Vérifier que la réponse ressemble à la sortie nslookup suivante :\nPour afficher les serveurs de noms, taper la commande suivante :\nnslookup -type=NS benoitgaumard.fr Vérifier que la réponse ressemble à la sortie nslookup suivante :\nAutre test avec un enregistrement de type www :\nLe site est maintenant joignable via les 2 urls et la gestion des entrées DNS s’effectue directement dans le portail Azure.\nNote: Conseil ajoutez un lock de type Delete sur votre resource group DNS afin déviter que celui-ci ne soit supprimé accidentellement.\nEnjoy !\n","link":"http://localhost:1313/post/2024-11-13-how-to-delegate-a-domain-to-azure-dns/","section":"post","tags":["DNS"],"title":"How to delegate a domain to Azure DNS"},{"body":"","link":"http://localhost:1313/tags/kql/","section":"tags","tags":null,"title":"Kql"},{"body":"","link":"http://localhost:1313/tags/rbac/","section":"tags","tags":null,"title":"RBAC"},{"body":"If you want to create your own or to contribute to an existing GitHub project you are on the right page.\nThis article presents a PowerShell script that can be used to quickly switch between subscriptions.\nManaging subscriptions can be a challenge in any cloud journey. Here's a script to save you some time. Now can quickly switch between your Azure subscriptions by entering the listed index.\nForked and updated from: matthiasguentert/azure-subscription-switcher (github.com)\n1#azure-subscription-switcher 2Function Switch-AzContext { 3 if (-not (Get-Module -ListAvailable -Name Az.Accounts)) { 4 Write-Host -ForegroundColor Red \u0026#39;Az.Accounts PowerShell module not installed!\u0026#39; 5 return 6 } 7 8 Import-Module Az.Accounts -ErrorAction Stop 9 10 try { 11 # Select only enabled subscriptions and avoid duplicated subscriptions if the user has multiple tenants enrolled with LightHouse 12 $SubscriptionList = Get-AzSubscription | Where-Object { $_.State -eq \u0026#34;Enabled\u0026#34; -and ($_.HomeTenantId -eq $_.TenantId)} | ConvertTo-Json | ConvertFrom-Json 13 } catch { 14 Write-Host -ForegroundColor Red \u0026#34;You have no context, please login first!\u0026#34; 15 return 16 } 17 18 try { 19 $SubscriptionActive = Get-AzContext | ConvertTo-Json | ConvertFrom-Json 20 } catch { 21 Write-Host -ForegroundColor Red \u0026#34;You have no subscription, please login first!\u0026#34; 22 return 23 } 24 25 $available = @() 26 $index = 1 27 $SubscriptionList | ForEach-Object { 28 $available += [PSCustomObject]@{ 29 Active = if ($_.Id -eq $SubscriptionActive.Subscription.Id) { \u0026#34;===\u0026gt;\u0026#34; } else { $null } 30 Index = $index++ 31 Subscription = $_.Name 32 SubscriptionId = $_.Id 33 State = $_.State 34 HomeTenantId = $_.HomeTenantId 35 Account = if ($_.Id -eq $SubscriptionActive.Subscription.Id) { $SubscriptionActive.Account.Id } else { $null } 36 } 37 } 38 39 $available | Format-Table -AutoSize 40 41 try { 42 [int]$userInput = Read-Host \u0026#34;Index (0 to quit)\u0026#34; 43 44 if ($userInput -eq 0) { 45 Write-Host -ForegroundColor Red \u0026#39;Won\u0026#39;\u0026#39;t switch Azure PowerShell context!\u0026#39; 46 return 47 } elseif ($userInput -lt 1 -or $userInput -gt $index-1) { 48 Write-Host -ForegroundColor Red \u0026#34;Input out of range\u0026#34; 49 return 50 } 51 52 $selection = $available | Where-Object { $_.Index -eq $userInput } 53 Write-Host -ForegroundColor Cyan \u0026#39;Switching to:\u0026#39;, $selection.Subscription 54 Set-AzContext -SubscriptionId $selection.SubscriptionId | Out-Null 55 Get-AzContext 56 } catch { 57 Write-Host -ForegroundColor Red \u0026#34;Invalid input, please enter a valid index!\u0026#34; 58 } 59} 60 61Clear-Host 62Switch-AzContext\rHere is the script output:\nHere is also a version with a user interface (Out-GridView):\n1#azure-subscription-switcher-with-outgridview 2Function Switch-AzContext { 3 if (-not (Get-Module -ListAvailable -Name Az.Accounts)) { 4 Write-Host -ForegroundColor Red \u0026#39;Az.Accounts PowerShell module not installed!\u0026#39; 5 return 6 } 7 8 Import-Module Az.Accounts -ErrorAction Stop 9 10 try { 11 # Select only enabled subscriptions and avoid duplicated subscriptions if the user has multiple tenants enrolled with LightHouse 12 $SubscriptionList = Get-AzSubscription | Where-Object { $_.State -eq \u0026#34;Enabled\u0026#34; -and ($_.HomeTenantId -eq $_.TenantId)} | ConvertTo-Json | ConvertFrom-Json 13 14 } catch { 15 Write-Host -ForegroundColor Red \u0026#34;You have no context, please login first!\u0026#34; 16 return 17 } 18 19 try { 20 $SubscriptionActive = Get-AzContext | ConvertTo-Json | ConvertFrom-Json 21 } catch { 22 Write-Host -ForegroundColor Red \u0026#34;You have no subscription, please login first!\u0026#34; 23 return 24 } 25 26 $available = @() 27 $index = 1 28 $SubscriptionList | ForEach-Object { 29 $available += [PSCustomObject]@{ 30 Active = if ($_.Id -eq $SubscriptionActive.Subscription.id) { \u0026#34;===\u0026gt;\u0026#34; } else { $null } 31 Index = $index++ 32 Subscription = $_.Name 33 SubscriptionId = $_.Id 34 State = $_.State 35 HomeTenantId = $_.HomeTenantId 36 Account = if ($_.Id -eq $SubscriptionActive.Subscription.id) { $SubscriptionActive.Account.id } else { $null } 37 } 38 } 39 40 $selection = $available | Out-GridView -Title \u0026#34;Select a subscription. Found: $($SubscriptionList.count)\u0026#34; -OutputMode Single 41 42 try { 43 if (-not $selection) { 44 Write-Host -ForegroundColor Red \u0026#34;No subscription selected. Operation cancelled.\u0026#34; 45 return 46 } 47 48 Write-Host -ForegroundColor Cyan \u0026#39;Switching to:\u0026#39;, $selection.Subscription 49 Set-AzContext -SubscriptionId $selection.SubscriptionId | Out-Null 50 Get-AzContext 51 } catch { 52 Write-Host -ForegroundColor Red \u0026#34;Invalid input, please enter a valid index!\u0026#34; 53 } 54} 55 56Clear-Host 57Switch-AzContext\rHere is the script output:\nEnjoy!\n","link":"http://localhost:1313/post/2024-11-07-azure-subscription-switcher/","section":"post","tags":["productivity","tools","diagrams"],"title":"Azure subscription switcher"},{"body":"","link":"http://localhost:1313/tags/diagrams/","section":"tags","tags":null,"title":"Diagrams"},{"body":"If you want an integrated solution and avoid multiple external tools (like Visio, PowerPoint, etc.) to create diagrams, here is a very helpful extension.\nThis unofficial extension integrates Draw.io (also known as diagrams.net) into VS Code.\nTo create a new diagram, just create an empty *.drawio, *.drawio.svg, or *.drawio.png file and open it.\n.drawio.svg files are valid .svg files that can be embedded in GitHub readme files! No export needed. .drawio.png files are valid .png files! No export needed. You should use .svg whenever possible. It's very practical when you make updates without re-importing everything. Just make the change and that’s all.\nDownload is available here: Draw.io Integration – Visual Studio Marketplace\nHere is the demo: ","link":"http://localhost:1313/post/2024-11-05-draw.io-vscode-extension-a-must-have-for-your-diagrams/","section":"post","tags":["productivity","tools","diagrams"],"title":"Draw.io VSCode Extension: A Must-Have for Your Diagrams"},{"body":"If you want to create your own or to contribute to an existing GitHub project you are on the right page.\nScenarios You can contribute on a GitHub project by making contributions on various topics:\nReport a bug Submit a fix Propose new features Become a maintainer ... Main principles The main branch is locked, no direct commit possible. Each developer work in their own branch from main Developer do a pull request Once PR is validated, the code is merged A release is created Here is the main contribution workflow:\nSteps for contribution 0. Prerequisites You must have Git installed on your computer: Git - Downloads (git-scm.com) A code editor like Visual Studio Code: Visual Studio Code - Code Editing. Redefined 1. Pull the latest changes from upstream into your local repository To start working on your contribution, you need first to retrieve the project on your local repository.\nTo do so, use this command :\n1git clone https://github.com/Benoit-Gaumard/ProjectName Note Replace \u0026quot;ProjectName\u0026quot; by the actual project you want to contribute to.\nBefore you start making any changes to your local files, it's a good practice to first synchronize your local repository with the project repository.\nUse the following command to \u0026quot;pull\u0026quot; any changes from the \u0026quot;master\u0026quot; branch of the \u0026quot;upstream\u0026quot; into your local repository.\n1git pull upstream master Note If the project repository uses \u0026quot;main\u0026quot; instead of \u0026quot;master\u0026quot; for its default branch, then you would use git pull upstream main instead.\n2. Create a new branch Rather than making changes to the project's \u0026quot;master\u0026quot; branch, it's a good practice to instead create your own branch. This creates an environment for your work that is isolated from the master branch.\nUse this command to create a new branch and then immediately switch to it. The name of the branch should briefly describe what you are working on, and should not contain any spaces.\nBashgit checkout -b my_new_feature\nFor example, I used git checkout -b doc-fixes because I was making some small fixes to the documentation.\nTo show your local branches, use this command :\nBashgit branch\nYou should see your new branch as well as \u0026quot;master\u0026quot;, and your new branch should have an asterisk next to it to indicate that it's \u0026quot;checked out\u0026quot; (meaning that you're working in it).\n3. Make changes in your local repository​ 4. Use a text editor or IDE like Microsoft VS Code to make the changes you planned to the files in your local repository. Because you checked out a branch in the previous step, any edits you make will only affect that branch.\nDownload VS Code here: Visual Studio Code\n4. Commit your changes​ After you make a set of changes, use the following command to stage your changes.\nBashgit branch\nThe description of your commit must be clear, explicit and understandable to anyone, example :\nBashgit commit -m \u0026quot;fix: typos in set_config docstring\u0026quot;\nNote This commit message might be included in a changelog.\nCommit messages must be standardized: Conventional Commits\n- feat: my new feature description\r- release: my new realease description\r- hotfix: my hotfix description\r- fix: my fix description\rIf you are making multiple sets of changes, it's a good practice to make a commit after each set.\n5. Push changes to your branch​ When you are done making all of your changes, upload these changes to your branch using :\nBashgit push origin my_new_feature\nThis command \u0026quot;pushes\u0026quot; your changes to the \u0026quot;my_new_feature\u0026quot; branch of the \u0026quot;origin\u0026quot; (which is your fork on GitHub).\n6. Create a pull request​ A GIT pull request occurs when a developer asks for changes committed to a specific branch to be considered for inclusion in an other branch of the repository.\nGo to your Github project web page in the Pull request menu and click on New pull request.\nOnce it's done, click on Create pull request.\nIf there is no conflicts between your fork and the main branch, your pull request will be created and contributors will be notify. The contributors will then analyze your fork and choose to merge your code or not.\nYou should then add some colleagues working on the repository as reviewers and yourself as an assignee, reviewers will be notified by email automatically.\nAs a best practice, you should let your collegues know your pull request creation (through a Microsoft Teams message, or vocally), as emails from github are very frequently ignored.\n7. Code Review​ Before merging, the code should be reviewed by peers, code review involves one or more team members checking another teammate's work.\n8. Merge to the main branch​ Congratulations! Your code has been reviewed and merged into the main branch. It can be reused by someone to make a new contribution.\nGolden rules 1 - Commit each day 2 - Adopt a naming convention for your commits (eg. feat: for a new feature, fix: for a bug fix) 3 - Enhance security in your code with the principle of least privilege ","link":"http://localhost:1313/post/2024-11-05-github-contribution-workflow/","section":"post","tags":["productivity","tools","diagrams"],"title":"GitHub contribution workflow"},{"body":"","link":"http://localhost:1313/tags/productivity/","section":"tags","tags":null,"title":"Productivity"},{"body":"","link":"http://localhost:1313/tags/tools/","section":"tags","tags":null,"title":"Tools"},{"body":"","link":"http://localhost:1313/categories/tools/","section":"categories","tags":null,"title":"Tools"},{"body":"Free dashboards that provides a visualization of cyber attacks all over the world.\nThe main security players offer free dashboards that provide a simple and comprehensive visualization to better understand the dangers of the Internet and help companies analyze the state of various threats.\nSome interesting sites to bookmark:\nSonicwall: https://securitycenter.sonicwall.com/m/page/worldwide-attacks Netscout: https://horizon.netscout.com/?mapPosition=0.00~0.00~1.00 Talos: https://talosintelligence.com/fullpage_maps/pulse Digital attack map: https://www.digitalattackmap.com/#anim=1\u0026color=0\u0026country=ALL\u0026list=0\u0026time=18763\u0026view=map Checkpoint: https://threatmap.checkpoint.com/ Fortinet: https://threatmap.fortiguard.com/ https://threatbutt.com/map/ ","link":"http://localhost:1313/post/2024-11-13-cyber-attacks-live-maps/","section":"post","tags":["security"],"title":"Cyber attacks live maps"},{"body":"Here is the step by step guide to host your Hugo website on Github Pages.\nPrerequisites Before diving in, ensure you have the following:\nGit A GitHub account Hugo installed on your system and running localy Note In this article we will copy a local Hugo web site to Git Hub Pages. First ensure your web site is working well locally. For more information on creating your first Hugo website locally, check out this guide.\nSetting Up GitHub Pages GitHub Pages is a free static site hosting service that takes HTML, CSS, and JavaScript files straight from a repository on GitHub, optionally runs the files through a build process, and publishes a website.\nFollow these steps to get started:\nCreate a new repository named username.github.io to publish your user site. eg. Benoit-Gaumard.github.io\nEnable GitHub Pages in your repository settings from Setting --\u0026gt; Pages When enabled a new deployment actions pipeline \u0026quot;pages build and deployment\u0026quot; with be automatically created.\nClone the repository to your local machine.\n1git clone https://github.com/Benoit-Gaumard/Benoit-Gaumard.github.io.git Add an index.html file to your repository. 1\u0026lt;h1\u0026gt; Demo site on Git Hub pages\u0026lt;/h1\u0026gt; Commit and push your changes 1cd Benoit-Gaumard.github.io 2git add . \u0026amp;\u0026amp; git commit -m \u0026#39;publish first github pages website\u0026#39; -a \u0026amp;\u0026amp; git push The deployment will start after the push\nWithin a few moments, your web page be live at https://username.github.io. eg. https://Benoit-Gaumard.github.io\nCreate the deployment pipeline Create an empty yaml file in your local repository. 1.github/workflows/hugo.yaml Copy and paste the YAML below into the file you created. Change the branch name and Hugo version as needed.\n1code Copy your local web site to GitHub Pages 1$SourcePath = \u0026#34;C:\\REPOS\\BLOG\\hugo-website\\bga-new-site\u0026#34; 2$DestinationPath = \u0026#34;C:\\REPOS\\BLOG\\Benoit-Gaumard.github.io\u0026#34; 3 4# Delete existing folder content 5Get-ChildItem -Path $DestinationPath -Exclude \u0026#34;.git\u0026#34;, \u0026#34;.github\u0026#34; | 6 ForEach-Object { 7 if ($_.PSIsContainer) { 8 Remove-Item -Path $_.FullName -Recurse -Force 9 } else { 10 Remove-Item -Path $_.FullName -Force 11 } 12 } 13 14# Get all items in the source path, excluding .git and .gity 15Get-ChildItem -Path $SourcePath -Recurse -Exclude \u0026#34;.git\u0026#34;, \u0026#34;.github\u0026#34; | 16 ForEach-Object { 17 # Adjust the destination path for each item 18 $targetPath = $_.FullName -replace [regex]::Escape($SourcePath), $DestinationPath 19 20 # Ensure that the destination directory exists 21 if ($_.PSIsContainer) { 22 # Create directory if it\u0026#39;s a folder 23 if (!(Test-Path -Path $targetPath)) { 24 New-Item -ItemType Directory -Path $targetPath -Force 25 } 26 } else { 27 # Copy files 28 Copy-Item -Path $_.FullName -Destination $targetPath -Force 29 } 30 } 31 32# Commit and deploy 33cd C:\\REPOS\\BLOG\\Benoit-Gaumard.github.io 34git add . \u0026amp;\u0026amp; git commit -m \u0026#39;publish new content\u0026#39; -a \u0026amp;\u0026amp; git push The deployment starts\nYou new hugo website is up and runnning at https://username.github.io. eg. https://Benoit-Gaumard.github.io\n","link":"http://localhost:1313/post/2024-11-13-how-to-host-your-hugo-website-on-github-pages/","section":"post","tags":["hugo","github"],"title":"How to host your Hugo website on Github Pages?"},{"body":"","link":"http://localhost:1313/tags/hugo/","section":"tags","tags":null,"title":"Hugo"},{"body":"","link":"http://localhost:1313/categories/hugo/","section":"categories","tags":null,"title":"Hugo"},{"body":"","link":"http://localhost:1313/tags/security/","section":"tags","tags":null,"title":"Security"},{"body":"This section offers a curated collection of helpful links, providing resources and tools to enhance your understanding and make your experience more productive.\n🆕 New Links To Check Back To Top\nBlog Cloud63 Vincent Misson https://blog.cloud63.fr/ Azure Talk Blog: https://blog.zuehlke.cloud/ Achraf Ben Alaya: https://achrafbenalaya.com/ 🧠 AI Back To Top\nInteractive collection of the 18 Guidelines for Human-AI Interaction ","link":"http://localhost:1313/page/blogroll/","section":"page","tags":null,"title":"Blog Roll"},{"body":"In this section, you’ll discover the most recent updates and insights gathered from a diverse range of websites, ensuring you stay informed about the latest trends, news, and developments about Azure.\nInfo\r3 latest posts from various blogs. Feeds are updated automaticaly every day.\n🆕 Azure Feeds Blog Thu, 31 Oct 2024: Configure File in Azure Static Web Apps\nThu, 31 Oct 2024: GitHub Copilot for Azure: 6 Must-Try Features\nWed, 30 Oct 2024: Microsoft Cloud strength drives first quarter results\n🆕 Azure Governance and Management Blog Wed, 20 Nov 2024: User-Assigned Identity-based Access for Machine Configuration Packages – Generally Available\nWed, 13 Nov 2024: Data Ingestion for Azure Event Hubs: Quick Guide\nWed, 09 Oct 2024: Azure Landing Zones - Policy Refresh Q1 FY25\n🆕 Azure Infrastructure Blog Tue, 19 Nov 2024: Enhancing infrastructure efficiency with Azure Boost DPU\nTue, 19 Nov 2024: Securing Azure infrastructure with silicon innovation\nWed, 13 Nov 2024: Harnessing Microsoft Dev Box and Azure Deployment Environments\n🆕 Azure Architecture Blog Wed, 20 Nov 2024: Announcing comprehensive guidance for AI adoption and architecture\nThu, 14 Nov 2024: CRM automation with Azure OpenAI and Promptflow\nWed, 30 Oct 2024: End-to-End Full-Stack Web Application with Azure AD B2C Authentication: A Complete Guide\n🆕 Azure Networking Blog Mon, 04 Nov 2024: Revolutionizing Network Management and Performance with ATC, HUD and AccelNet on Windows Server 2025\nMon, 04 Nov 2024: A New Dawn of Software Defined Networking (SDN) in Windows Server 2025\nWed, 20 Nov 2024: Announcing Zero Trust DNS Private Preview\n🆕 Azure Network Security Blog Tue, 19 Nov 2024: Copilot in Azure embedded experience for Azure Firewall integration in Security Copilot\nFri, 15 Nov 2024: Enhancements to the Azure Firewall User Experience\nThu, 31 Oct 2024: IPv6 Adoption: Enhancing Azure WAF on Front Door\n🆕 Azure Storage Blog Wed, 20 Nov 2024: Announcing the Next generation Azure Data Box Devices\nTue, 19 Nov 2024: Achieve Enhanced Security for Azure Backup with Advancements in Soft Delete and Immutability\nTue, 19 Nov 2024: Azure Backup: Protect SAP workloads (SAP HANA, SAP ASE and SQL) delivers more value with lower TCO\n🆕 Azure Tools Blog Wed, 20 Nov 2024: Azure CLI and Azure PowerShell Ignite 2024 Announcement\nWed, 30 Oct 2024: Unlocking the Best of Azure with AzureRM and AzAPI Providers\nMon, 21 Oct 2024: Announcing AzAPI 2.0\n🆕 Azure FinOps Blog Fri, 08 Nov 2024: Optimize AI costs by choosing the right Azure OpenAI pricing offer for you\nWed, 06 Nov 2024: Microsoft Cost Management updates—September 2024 (summary)\nTue, 05 Nov 2024: Managing Azure OpenAI costs\n🆕 Core Infrastructure and Security Blog Mon, 18 Nov 2024: Token Protection by using Microsoft Entra ID.\nMon, 04 Nov 2024: Configuring total retention period for log analytics workspace tables at scale\nThu, 07 Nov 2024: Active Directory Hardening Series - Part 6 – Enforcing SMB Signing\n🆕 Startups at Microsoft Blog Tue, 19 Nov 2024: Azure AI Studio Prompt Flow with Azure Data Explorer for Vector Search\nMon, 04 Nov 2024: Effective Monitoring of Azure PostgreSQL for Azure OpenAI Workloads\nMon, 28 Oct 2024: Dynamic Multi-Cloud Networking: Configuring a BGP-Enabled VPN Between Azure and AWS\n🆕 Entra Blog Tue, 19 Nov 2024: Microsoft partners for new SASE ecosystem\nTue, 19 Nov 2024: What’s new in Microsoft’s Security Service Edge solution\nTue, 19 Nov 2024: Microsoft and Netskope: Unified, identity-centric security\n","link":"http://localhost:1313/page/latest-news/","section":"page","tags":null,"title":"Latest news"},{"body":"This article explains how to create your first web site on Windows using Hugo.\nPrequisites Install Chocolatey (Chocolatey is a free and open-source package manager for Windows) Install Git https://git-scm.com/book/en/v2/Getting-Started-Installing-Git Install Hugo From a terminal type:\n1choco install hugo-extended Create a new hugo web site 1hugo new site \u0026#34;mysite\u0026#34; Go to the previously created web site\n1cd mysite 1git init Install a theme (eg. Hugo Clarity Theme) 1git submodule add https://github.com/chipzoller/hugo-clarity themes/hugo-clarity For hugo clarity copy current config and pages 1Copy-Item -Path \u0026#34;themes/hugo-clarity/exampleSite/*\u0026#34; -Destination \u0026#34;.\u0026#34; -Recurse -Force 2Remove-Item -Path \u0026#34;hugo.toml\u0026#34; -Force Display you website locally 1hugo server You have a demo a local demo of your web site from: http://localhost:1313/\nCreate your first post 1hugo new content content/post/my-first-post.md Add markdown content 1+++ 2title = \u0026#39;My First Post\u0026#39; 3date = 2024-01-14T07:07:07+01:00 4draft = true 5+++ 6 7## Introduction 8 9This is **bold** text, and this is *emphasized* text. 10 11Visit the [Hugo](https://gohugo.io) website! Enjoy!\n","link":"http://localhost:1313/post/2024-09-11-create-your-first-hugo-website-locally/","section":"post","tags":["hugo"],"title":"Create your first Hugo website locally on Windows"},{"body":"Why I migrated from Wordpress to Hugo website. Pros and cons.\nWordPress vs. Hugo: Understanding the Difference and Why Hugo Might Be Right for You Building a website today means choosing between many different tools and platforms. Two popular options—WordPress and Hugo—offer very different approaches to website creation, each with its strengths and ideal use cases. In this post, we’ll dive into the core differences between WordPress and Hugo and explore why Hugo may be the perfect fit for your needs.\nWhat is WordPress? WordPress is a content management system (CMS) that powers over 40% of websites on the internet. It’s known for its user-friendly, visual interface, extensive themes and plugins, and a large community that offers support, customization, and resources. WordPress allows users to create websites without knowing how to code, making it accessible to beginners.\nKey Features of WordPress: Database-Driven: Content, themes, and plugins are stored in a database, allowing users to update content directly through the dashboard. Extensive Plugins: Over 50,000 plugins enable you to add virtually any functionality, from e-commerce features to SEO tools. Themes and Customization: WordPress themes make it easy to achieve different styles without design experience. Community Support: A huge community of developers, designers, and users makes it easy to find resources and support. What is Hugo? Hugo is a static site generator (SSG) known for its speed and simplicity. Instead of relying on a database, Hugo generates HTML files that are ready to be served directly to visitors. It doesn’t come with a visual content management interface like WordPress, but instead, works well for developers and users familiar with Markdown and a code-based workflow.\nKey Features of Hugo: Blazing Fast Speed: Hugo generates static pages quickly, with site builds often taking seconds regardless of the size of the website. Content in Markdown: Content is written in Markdown files, making it easy to organize and version control. No Database Needed: Because there’s no database, sites are secure and efficient, with minimal server requirements. Flexible Theming: Hugo’s themes are powerful and customizable, providing a good range of layouts and styles. Developer-Friendly: It’s ideal for developers who want full control over their site’s structure and performance. WordPress vs. Hugo: Key Differences 1. Content Management WordPress: User-friendly dashboard, easy content editing, and media management make WordPress ideal for non-developers and content-heavy sites. Hugo: Content is written in Markdown and stored as static files, which can be slightly challenging for non-technical users but provides a lightweight, code-driven approach. 2. Speed and Performance WordPress: Database queries, plugins, and a larger codebase can impact performance, especially for high-traffic sites. Hugo: Static HTML files load quickly and efficiently, allowing Hugo sites to handle traffic spikes with minimal load times. 3. Hosting and Scalability WordPress: Typically requires a hosting environment with a server and database. Managed WordPress hosting solutions are available, but costs may increase with traffic. Hugo: Hugo’s static pages can be hosted on platforms like GitHub Pages, Netlify, or any basic web server, which keeps hosting costs low and scalability easy. 4. Security WordPress: The reliance on plugins and a server with a database can expose WordPress sites to security risks if not carefully managed. Hugo: Hugo sites are secure by design, as there’s no backend database or complex server interaction, minimizing vulnerability to attacks. 5. Customization and Flexibility WordPress: Highly customizable with plugins and themes but may require more resources to optimize for performance. Hugo: Flexible for developers, but without a plugin ecosystem. Customizations are done by editing configuration files and theme templates. Advantages of Using Hugo for Your Website For certain types of websites, Hugo offers significant benefits over WordPress:\n1. Unmatched Speed Hugo is incredibly fast. Sites built with Hugo load quickly, and even large sites with thousands of pages can be generated in seconds. This makes Hugo a great choice for SEO and user experience, as search engines and visitors alike prefer fast-loading sites.\n2. Enhanced Security Without a backend database or plugins, Hugo sites are inherently secure. There’s no risk of SQL injection attacks, plugin vulnerabilities, or outdated core software because there’s no dynamic code running on the server.\n3. Low Hosting Costs Hugo sites are static and can be hosted on free or low-cost static hosting services such as GitHub Pages, Netlify, or Vercel. This makes Hugo a budget-friendly choice for individuals or organizations looking to save on hosting expenses.\n4. Version Control for Content Since Hugo stores content in Markdown files, it’s easy to manage and track changes with version control tools like Git. This makes Hugo ideal for collaborative projects, documentation sites, and developers who want precise control over content updates.\n5. Developer-Friendly Customization Hugo’s configuration and templating system offer extensive flexibility, making it easy for developers to build highly customized and optimized sites without relying on third-party plugins. For a technical audience, this level of control can be a significant advantage.\nWhen Should You Choose Hugo? Hugo is an excellent choice if:\nYou want a fast, lightweight, and secure website. You have technical experience or are comfortable learning Markdown and basic web development concepts. Your site doesn’t require a lot of dynamic, user-generated content (like comments or e-commerce). You prefer low hosting costs and an easy deployment process. When Should You Choose WordPress? WordPress is a better fit if:\nYou need a user-friendly CMS for frequent content updates. Your site will rely heavily on plugins for functionality (e.g., e-commerce, social features). You have minimal technical knowledge and prefer a visual editor. You want access to a large community and extensive support resources. Conclusion Both WordPress and Hugo are powerful tools, each serving a unique purpose. WordPress excels in user-friendliness, customization options, and plugin support, making it ideal for content-rich sites managed by non-developers. Hugo, on the other hand, is perfect for developers or tech-savvy users who value speed, security, and a streamlined, lightweight approach to web development.\nIn the end, the right choice depends on your website’s needs, your technical comfort level, and your priorities. For those who prioritize performance, security, and low maintenance, Hugo is a compelling alternative to WordPress.\nWith these insights, you’ll be better equipped to decide which platform best suits your project and goals. Happy building!\n","link":"http://localhost:1313/post/2024-09-11-from-wordpress-to-hugo/","section":"post","tags":["hugo"],"title":"From Wordpress to Hugo website"},{"body":"This article explains how to embed your GitHub code in your Hugo website using a shortcode.\nCreate the shortcode Let’s create a new shortcode. In your Hugo site’s layouts/shortcodes directory (if the folder shortcodes does not exist create it manually), create a file called embedgithubcode.html and paste the following:\n1{{ $file := .Get 0 }} 2{{ with resources.GetRemote $file }} 3 {{ with .Err }} 4 {{ errorf \u0026#34;%s\u0026#34; . }} 5 {{ else }} 6 {{ $lang := path.Ext $file | strings.TrimPrefix \u0026#34;.\u0026#34; }} 7 {{ highlight .Content $lang }} 8 {{ end }} 9{{ else }} 10 {{ errorf \u0026#34;Unable to get remote resource.\u0026#34; }} 11{{ end }} Use the shortcode In any markdown file, you can now use the shortcode like this (note the space I added between {{ to prevent hugo from rendering the shortcode on this page):\n(Note the space I added between {{ to prevent hugo from rendering the shortcode on this page):\n1{ {\u0026lt; embedgithubcode \u0026#34;https://raw.githubusercontent.com/Benoit-Gaumard/azure-policy-aliases-outgridview/refs/heads/main/azure-policy-aliases-outgridview.ps1\u0026#34; \u0026gt;}} Here is the result The script is displayed from my github repository https://github.com/Benoit-Gaumard/azure-policy-aliases-outgridview :\n1# List all namespaces available in Azure Policy 2$AllNamespaces = (Get-AzPolicyAlias -ListAvailable).Namespace | Sort-Object | Get-Unique 3 4# Select the namespaces you want to work with 5$SelectedNamespaces = $null 6$SelectedNamespaces = @() 7 8$AllNamespaces | Out-GridView -Title \u0026#34;Select one or more namespace. Found: $($AllNamespaces.count)\u0026#34; -OutputMode Multiple ` 9| Foreach-object { $SelectedNamespaces += $_ } 10 11# Get all aliases available in the selected namespaces 12$AvailableAliases = $null 13$AvailableAliases = @() 14 15Foreach ($Namespace in $SelectedNamespaces) 16{ 17 $AvailableAliases += (Get-AzPolicyAlias -NamespaceMatch $Namespace).Aliases | Select-Object Name 18} 19 20# List all aliases available in the selected namespaces 21$AvailableAliases | Out-GridView -Title \u0026#34;Available alias for selected ($($SelectedNamespaces.count)): $($SelectedNamespaces)\u0026#34; -OutputMode Single\rEnjoy!\n","link":"http://localhost:1313/post/2024-10-11-how-to-embed-github-code-to-hugo/","section":"post","tags":["hugo"],"title":"How to embed you GitHub code to Hugo using a shortcode?"},{"body":"If you want to create your own or contribute to an existing GitHub project, you are on the right page.\nThroughout my various assignments, I have often heard: \u0026quot;It doesn't matter, I'm not the one paying.\u0026quot; If you have ever taken an Azure subscription with a pay-as-you-go offer, you know that it is essential to control usage costs. Whether for personal use, an SME, or a large group, Azure cost optimization should be part of your cloud strategy.\nCloud adoption and cost reduction are not necessarily associated. The power of the cloud allows you to deploy resources quickly and benefit from the provider's datacenter capabilities to deploy large configurations rapidly.\nWith one click, it is very easy to inflate the bill. The interest of a cloud provider is obviously to encourage and facilitate the use of its services, but it is also advisable to guide its users to make the most of the deployed elements. A satisfied customer is a returning customer 🙂\nBelow are some tips to help you lower the bill:\nUse the right sizes of virtual machines according to needs There are several sizes and options available for Azure virtual machines that you can deploy to run your applications and workloads. These machines are classified by families, so it is advisable to choose the configuration best suited to your needs.\nGeneral purpose Compute optimized Memory optimized Storage optimized GPU optimized High-performance compute Even though the size of the machine can be increased or decreased at any time during its lifecycle, choose the right size from the start. There is no need to provision an F-size machine to host a showcase website for an SME.\nUseful links:\nAzure VM Comparison (azureprice.net) Microsoft Azure VM Selector Block the deployment of certain machine sizes There is a built-in Azure policy called Allowed virtual machine SKUs that allows you to authorize the deployment of certain machine sizes only and thus block the deployment of unauthorized machines. This way, it is easier to control VM deployment costs.\nIn this example, only Basic_A1, Basic_A2, and Basic_A3 size machines are allowed to be deployed. If you try to deploy an unauthorized machine size, the Azure API will send an error message.\nStart/stop machines automatically With the cloud, things have changed; resources are billed on a usage basis. It is therefore necessary to schedule the stop/start of your VMs when they are not in use to save money. By analogy, at home, when you leave a room, you turn off the light; the principle is the same 😉\nThere are several solutions to do this automatically:\nUse the native Azure Auto-shutdown function on each VM Use the Azure Start-Stop VM solution with Azure automation Azure Start-Stop VM Use a custom PowerShell script executed by Azure automation. There are many custom scripts to stop/start your VMs in Azure based on tags. I found an excellent script here: Scheduled Virtual Machine Shutdown Startup that I am reworking and adapting, which will be made available in a future article. Note: Never stop a virtual machine from the OS by doing Start -\u0026gt; Stop because the VM will still be allocated on the hypervisor in Azure, and you will be billed for the machine even if it is turned off. The best practice is to do a Stop from the Azure portal. Only the Stopped (deallocated) status ensures that the VM is properly turned off and that the VM resource is no longer allocated, thus no longer billed.\nUse Azure Advisor As its name suggests, Azure Advisor is an \u0026quot;advisor\u0026quot; that describes best practices to follow to optimize your Azure deployments. It analyzes your configuration and resource usage, then recommends solutions that can help you improve profitability, performance, high availability, and security.\nRecommendations are divided into 5 categories:\nHigh availability: Helps ensure and improve the continuity of your critical applications. For more information, see High availability advisor recommendations. Security: Helps detect threats and vulnerabilities that could lead to security breaches. For more information, see Security advisor recommendations. Performance: To improve the speed of your applications. For more information, see Performance advisor recommendations. Cost: To optimize and reduce your overall Azure spending. For more information, see Cost advisor recommendations. Operational excellence: For process and workflow efficiency, resource management, and deployment. For more information, see Operational excellence advisor recommendations. Use reserved instances (RI) Azure reservations allow you to save money by committing to a one or three-year plan for virtual machines, Azure Blob storage, or Azure Data Lake Storage Gen2, SQL Database compute capacity, Azure Cosmos DB throughput, or other Azure resources. The commitment allows you to get a discount on the resources you use. Reservations can significantly reduce resource costs, up to 72% off pay-as-you-go prices. Reservations provide a billing discount and have no impact on the runtime state of your resources.\nYou commit to consuming x% of Azure resources for 1 or 3 years and you will get a discount. More information available here: Save Compute Costs with Reservations\nUse saving plans Azure feature currently in private preview.\nUse Hybrid benefits The Azure Hybrid Benefit program offers a pricing advantage to customers who already have Microsoft licenses under a Software Assurance (SA) agreement. As a result, these already acquired licenses can be used in Azure. Eligible customers can save up to 40%* on Azure virtual machines (IaaS) and 55% on Azure SQL Database (PaaS) and SQL Server on Azure virtual machines (IaaS) with Azure Hybrid Benefit, or even 80% when combined with Azure reserved instances.\nAll information on Hybrid Benefit is available here: Azure Hybrid Benefit\nAll information on combining reserved instances (RI) + Hybrid benefits is available here: Azure RI + Hybrid Benefits\nNote: It is possible to enforce the use of Hybrid Benefit via an Azure policy available here: Enforce Hybrid Use Benefit\nImplement policies and tags Implementing tags and policies is fundamental before opening the Azure service to users.\nUsing tags in Azure will allow you to know who a resource is assigned to and to contact the person directly if needed (maintenance, billing, patching, etc.). Implementing policies will allow you to audit or constrain users to control the deployment of expensive resources.\nChoose the right type of disk When creating a virtual machine in Azure, several types of disks are offered.\nUltra disk Premium SSD Standard SSD Standard HDD Each type is intended for specific scenarios. Logically, if your application does not require high performance, the storage space of your application is small, or it is only for testing purposes, prefer an HDD disk as it is the cheapest.\nNote: When creating a VM, the Premium SSD type is selected by default. Don't forget to change it to save money.\nChoose the right storage tier for blobs Azure storage offers different access tiers that allow you to store your blob objects in the most cost-effective way.\nThe available access tiers are:\nHot: Optimized for storing frequently accessed data. Cool: Optimized for storing infrequently accessed data and stored for at least 30 days. Archive: Optimized for storing infrequently accessed data and stored for at least 180 days, under flexible latency conditions (a few hours). Note: The hot access tier, offered by default, remains the cheapest.\nPurge unused data/resources (Orphaned resources) When you delete Azure resources, such as a virtual machine, some associated components are not automatically deleted (public IP, disk, vnet, subnet, etc.). Some resources become \u0026quot;orphaned\u0026quot; and potentially billed.\nFiles in a storage account are billed based on the stored volume (GB). It is therefore necessary to regularly clean up to delete certain types of files (obsolete logs, ISO images, etc.).\nNote: It is important to regularly check these resources via a script, for example, to avoid \u0026quot;unnecessary\u0026quot; billing.\nUseful links:\nAzure Orphan Resources Support and train users To avoid any deviations, especially in terms of cost management, supporting and training users is essential.\nMicrosoft offers free courses from its Microsoft Learn platform: Microsoft Learn\nIf you want to train for free on Azure fundamentals, a free training (AZ-900) is available here: Azure Fundamentals\nCertification on Azure technologies is also a plus, as it validates skills and provides recognition in the job market.\nPaid training, depending on your role type (Administrator, Developer, Security, etc.), can be provided directly by Microsoft or accredited organizations.\nBelow is a link to the official Microsoft poster presenting the list of currently available certifications: Microsoft Certification Poster\nUse Azure Cost Management Take advantage of the tools included in your Azure subscription to better leverage the cloud and implement financial governance in your organization.\nTrack resource usage and manage costs with a single, unified view.\nMore information at the following link: Azure Cost Management\nSelect the right Azure region to deploy your resources As of today, Microsoft Azure offers 56 Azure regions worldwide. This allows you to deploy resources wherever you need them. But it can also help you reduce costs. Not all Azure services are available in all Azure regions, and not all Azure services cost the same in each region. Azure resource prices can depend on operating costs and other factors in the specific region. Generally, you want to deploy your virtual machines as close as possible to where you need them and place them in specific Azure regions.\nThis is why deploying and using the same Windows virtual machine in France will not cost the same as in Australia, for example.\nSign an enterprise agreement For large organizations, signing an enterprise agreement (EA) with Microsoft will allow you to consolidate all your Azure subscriptions into a single contract. Generating volume will allow you to negotiate discounts and rebates with Microsoft.\nOther cost optimization topics, in progress: Organize resources with management groups, for example (Test, prod, dev) Committing to long-term consumption (3 to 5 years) can lower the price Select the right region to store data Use Dev/test subscriptions Azure Low Priority VM Choose the right type of workload for your application (VM, container, App Service, etc.): Choose an Azure compute service Use containers Use the pricing calculator Monitor and downsize resources Configure autoscaling Stay informed about new features Use PaaS and SaaS Azure Dev test Set up budgets Use burstable VMs Use Azure spot VMs Management groups Azure policies and initiatives Train cloud operators Conduct regular reviews Understand and review your Azure bill Use third-party tools for FinOps: Cloudyn, etc. Conduct architecture reviews: Azure Well-Architected Review Develop FinOps practices within your company Azure Optimization Engine: The Azure Optimization Engine is an extensible solution designed to generate optimization recommendations for your Azure environment. See it like a fully customizable Azure Advisor. Naming convention RBAC ","link":"http://localhost:1313/post/2024-09-11-optimize-and-reduce-costs-in-azure/","section":"post","tags":["cloud","azure","cost optimization"],"title":"✨ Optimize and Reduce Costs in Azure"},{"body":"If you want to create your own or contribute to an existing GitHub project, you are on the right page.\nAzureRM provider and the remote backend require authentication. The best practice is to disable storage account access key and enable Entra Id (Azure AD) authentication.\nThis storage account configuration will cause the following issue during the terraform init phase\n1Status=403 Code=\u0026#34;KeyBasedAuthenticationNotPermitted\u0026#34; Message=\u0026#34;Key based authentication is not permitted on this storage account. To use Entra Id authentication , here is the configuration to apply on your Terraform configuration.\nOn the backend.tf file, add the use_azuread_auth = true parameter.\n1terraform { 2 backend \u0026#34;azurerm\u0026#34; { 3 resource_group_name = \u0026#34;\u0026lt;YOUR_BACKEND_STORAGE_RESOURCE_GROUP_NAME\u0026gt;\u0026#34; 4 storage_account_name = \u0026#34;\u0026lt;YOUR_BACKEND_STORAGE_ACCOUNT_NAME\u0026gt;\u0026#34; 5 container_name = \u0026#34;\u0026lt;YOUR_BACKEND_CONTAINER_NAME\u0026gt;\u0026#34; 6 key = \u0026#34;\u0026lt;YOUR_BACKEND_KEY_.tfstate\u0026gt;\u0026#34; 7 use_azuread_auth = true 8 } 9} On the provider.tf file, add the storage_use_azuread = true parameter.\n1terraform { 2 required_providers { 3 azurerm = { 4 source = \u0026#34;hashicorp/azurerm\u0026#34; 5 version = \u0026#34;4.1.0\u0026#34; 6 } 7 } 8} 9provider \u0026#34;azurerm\u0026#34; { 10 storage_use_azuread = true 11 skip_provider_registration = true 12 features {} 13} If you look at the storage account activity log. The “List Storage Account Keys” operations are from before use_azuread_auth = true was enabled, and Terraform listed the keys when accessing the state file. After started using Entra ID authentication, the keys were not listed anymore.\nIf using this access method on the Remote backend, your user or service principal needs Storage Data Blob Owner permission on the container scope.\nUsing Entra Id authentication for remote backend is a best practice align with RBAC and least privilege.\nPlease don’t hesitate to comment if there is anything wrong or inaccurate.\n","link":"http://localhost:1313/post/2024-11-07-azure-terraform-entra-id-authentication/","section":"post","tags":[],"title":"Azure Terraform Entra Id Authentication"},{"body":"","link":"http://localhost:1313/tags/cost-optimization/","section":"tags","tags":null,"title":"Cost Optimization"},{"body":"If you want to create your own or contribute to an existing GitHub project, you are on the right page.\nPrerequisites​ IDE (Vscode): Download Visual Studio Code – Mac, Linux, Windows TF executable: Releases · hashicorp/terraform (github.com) or here https://releases.hashicorp.com/terraform/ Azure Subscription Azure CLI: How to install the Azure CLI | Microsoft Learn\nGo​\nPrerequisites Create a storager account and container\nDefine the subscription to store the state\nInstall Terraform\nAdd it to the path\nType to test: terraform –version\n1terraform --version Create a new SPN or MI\nTest connection\nAZ login\n1az login --use-device-code --tenant \u0026lt;your_tenant_id\u0026gt; Set sub if you have multiple subscriptions\n1az account set --subscription \u0026lt;your_subscription_id\u0026gt; Create a container to store the tfstate\nStore Terraform state in Azure Storage Microsoft Learn\n1$RESOURCE_GROUP_NAME=\u0026#39;\u0026lt;your_rg_name\u0026gt;\u0026#39; 2$STORAGE_ACCOUNT_NAME=\u0026#39;\u0026lt;your_sta_name\u0026gt;\u0026#39; 3$CONTAINER_NAME=\u0026#39;tfstate\u0026#39; 4$LOCATION = \u0026#34;westeurope\u0026#34; 5 6# Create resource group 7az group create --name $RESOURCE_GROUP_NAME --location $LOCATION 8 9# Create storage account 10az storage account create --resource-group $RESOURCE_GROUP_NAME --name $STORAGE_ACCOUNT_NAME --sku Standard_LRS --encryption-services blob Create the container\nAdd storage blobh data contributor right\nCreate a backend file\n1terraform { 2 backend \u0026#34;azurerm\u0026#34; { 3 resource_group_name = \u0026#34;rg-terraform\u0026#34; 4 storage_account_name = \u0026#34;\u0026lt;your_sta_name\u0026gt;\u0026#34; 5 container_name = \u0026#34;tfstate\u0026#34; 6 key = \u0026#34;mystatefile.terraform.tfstate\u0026#34; 7 } 8} Run the following command to run the configuration:\n1terraform init A new state file will be created in the storage account.\nCreate your terraform code\nValidate the code\n1terraform validate Format the code\n1terraform fmt -recursive Plan or apply\n1terraform apply -auto-approve ","link":"http://localhost:1313/post/2024-07-11-set-up-your-first-terraform-environment-on-windows/","section":"post","tags":["terraform"],"title":"Set Up your first Terraform environment on Windows"},{"body":"","link":"http://localhost:1313/archives/","section":"","tags":null,"title":""},{"body":"Intro Hi there,\nMy name is Benoit Gaumard, a Cloud Consultant and Architect with a focus on Microsoft Azure and related services. As part of the Microsoft company, I’m passionate about cloud architecture, automation, infrastructure as code (IaC), DevOps, and cloud-native solutions. I created this blog to share insights and knowledge about Microsoft technologies.\nHere, I share my experiences and learning, which serves as both a personal reference and a learning tool. I’d love to connect and discuss how I might support your needs!\nBased in Paris, France, I work and live with a focus on cloud solutions.\nThis is a personal blog. The views expressed here are my own and do not reflect those of my employer. All content is for informational purposes only. I am not liable for any errors, omissions, or unavailability of the information provided.\nSkills Some of the technologies I work with:\n\u0026gt;_ Public Cloud (Microsoft Azure) \u0026gt;_ Hybrid Cloud (Microsoft Azure Stack Hub) \u0026gt;_ Governance (Cloud Adoption Framework, Landing zones, Policies) \u0026gt;_ Entra Id (Multi tenancy) \u0026gt;_ Automation (Azure automation, Azure functions, Powershell DSC, Pipelines) \u0026gt;_ Infrastructure as Code (ARM, Terraform, Bicep) \u0026gt;_ DevOps (Azure DevOps, GitHub Actions) \u0026gt;_ Languages (PowerShell, Python, Bash) \u0026gt;_ On Prem Background (Active Directory, Windows Server, Hyper-V, SCVMM, SCCM, ...) And so many things ... Get in touch If you have a project in mind, or just want to connect? You can find me on LinkedIn. Feel free to drop a message, and let’s explore the possibilities together!\nAchievements and Certifications Title Name Badge Azure AI Fundamentals AI-900 Azure Fundamentals AZ-900 Azure Administrator Associate AZ-104 Azure Solutions Architect Expert AZ-300 DevOps Engineer Expert AZ-400 Azure Security Engineer Associate AZ-500 Azure Network Engineer Associate AZ-700 Security, Compliance, and Identity Fundamentals SC-900 In Progress ... I wish you an excellent visit!\n","link":"http://localhost:1313/about/","section":"","tags":null,"title":"About"},{"body":"BlogRoll Security Web application security scanner : https://www.arachni-scanner.com Informations et recherches sur la sécurité : https://www.w4rri0r.com Powershell Empire : https://www.powershellempire.com/ Security checks : https://www.malwarearchaeology.com/cheat-sheets/ Identifying \u0026amp; Exploiting Leaked Azure Storage Keys : https://www.notsosecure.com/identifying-exploiting-leaked-azure-storage-keys/ ","link":"http://localhost:1313/page/blogroll-security/","section":"page","tags":null,"title":""},{"body":"","link":"http://localhost:1313/series/","section":"series","tags":null,"title":"Series"}]